<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/mvc   
http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 启动注解，注册服务，如验证框架、全局类型转换器-->
	<mvc:annotation-driven/>
	<!-- 启动自动扫描 -->
	<context:component-scan base-package="org.hrms">
	<!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 -->
	    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 配置视图解析器 -->
    <!--
   	prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），
   	比如传进来的逻辑视图名为WEB-INF/jsp/hello，则该该jsp视图页面应该存放在“WEB-INF/jsp/hello.jsp”； -->
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
 
 	<!-- 在上面的配置中，SessionLocaleResolver类通过一个预定义会话名将区域化信息存储在会话中。
 		  紧接着的“messageSource”配置的是国际化资源文件的路径，”classpath:messages”
 		  指的是classpath路径下的messages_zh_CN.properties文件和messages_en_US.properties文件。
 		  在这个配置文件的最后配置的是一个拦截器，该拦截器通过名为”lang”的参数来拦截HTTP请求，
 		  使其重新设置页面的区域化信息 ,lang参数是手动切换语言的参数,如下：
 		 http://localhost:8080/springmvc-i18n/index?lang=en_US
  	-->
    <mvc:interceptors>
    
    	<mvc:interceptor>
    	<mvc:mapping path="/**"/>
    	<bean class="org.hrms.web.interceptor.LocaleChangeInterceptor">
            <property name="paramName" value="lang" />
        </bean>
    	</mvc:interceptor>
         <mvc:interceptor>
        	<mvc:mapping path="/**"/>
        	<bean class="org.hrms.web.interceptor.AuthHandlerInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors> 
    
    	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="defaultEncoding" value="UTF-8"/>  
	    <!-- 指定所上传文件的总大小,单位字节。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->  
	    <property name="maxUploadSize" value="1124000"/>  
	</bean>
	
	<!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
	        <property name="exceptionMappings">  
	            <props>  
	                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到根目录/fileupload_error.jsp页面 -->  
	                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">fileupload_error</prop>  
	            </props>  
	        </property>  
	    </bean>
</beans>